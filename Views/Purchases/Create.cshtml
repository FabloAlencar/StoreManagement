@model StoresManagement.ViewModels.PurchaseFormViewModel

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Create</h1>

<h4>Purchase</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form id="newPurchase" asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div>
                <div class="form-group">
                    @Html.LabelFor(m => m.Branch.Name)
                    @Html.DropDownListFor(m => m.BranchId, new SelectList(Model.Branches, "Id", "Name"), "Select Branch", new { @class = "form-control" })
                </div>
                <div class="form-group">
                    <label asp-for="Customer.FullName" class="control-label"></label>
                    <input id="CustomerFullName" asp-for="Customer.FullName" class="form-control" />
                    <input id="CustomerId" type="hidden" asp-for="CustomerId" />
                </div>
            </div>

            <div>
                <h5 class="modal-title">NEW PURCHASE ITEM</h5>
            </div>

            <div>
                <table id="PurchaseItemsTable" class="table">
                    <tr>
                        <td>No.     </td>
                        <td>Product </td>
                        <td>Price   </td>
                        <td>Quantity</td>
                        <td>Total   </td>
                        <td>Action  </td>
                    </tr>

                    <tr>
                        <td><div id="ProductTableRowNumber"></div></td>
                        <td><div> <input id="ProductName" type="text" /></div></td>
                        <td><div> <input id="ProductPrice" type="number" readonly /> </div> </td>
                        @*<td><div id="ProductPrice"> </div> </td>*@
                        <td><div> <input id="ProdcutQuantity" type="number" /></div></td>
                        <td><div id="PurchaseTotalItem"></div> </td>
                        <td><button type="button" class="btn btn-secondary" onclick="addSale()">Add</button></td>
                    </tr>
                </table>

                <input id="ProductId" type="hidden" />
                <div>
                    <h2 class="text-right pt-3">Purchase Total</h2>
                    <h1 class="text-right pb-3" id="purchaseTotal"></h1>
                </div>
            </div>

            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>

        // Values from the form
        let branchID = document.getElementById('BranchId');
        let customerID = document.getElementById('CustomerId');
        let purchaseTotalLabel = document.getElementById('purchaseTotal');
        let newProductId = document.getElementById('ProductId');
        let newProductName = document.getElementById('ProductName');
        let newQuantity = document.getElementById('ProdcutQuantity');
        let newPrice = document.getElementById('ProductPrice');
        let newTotalItem = document.getElementById('PurchaseTotalItem');
        let productTableRowNumber = document.getElementById('ProductTableRowNumber');
        var table = document.getElementById('PurchaseItemsTable');

        var tableRowsNumber = 1;
        let purchaseItems = [];
        let purchaseTotal = 0;

        productTableRowNumber.innerHTML = tableRowsNumber;

        function addSale() {
            let quantityItem = parseInt(newQuantity.value);
            let currentPriceItem = parseFloat(newPrice.value);
            let purchaseTotalItem = quantityItem * currentPriceItem;
            purchaseTotal += purchaseTotalItem;

            var row = table.insertRow(tableRowsNumber);
            var cell1 = row.insertCell(0);
            var cell2 = row.insertCell(1);
            var cell3 = row.insertCell(2);
            var cell4 = row.insertCell(3);
            var cell5 = row.insertCell(4);
            var cell6 = row.insertCell(5);
            cell1.innerHTML = tableRowsNumber;
            cell2.innerHTML = newProductName.value;
            cell3.innerHTML = currentPriceItem;
            cell4.innerHTML = quantityItem;
            cell5.innerHTML = purchaseTotalItem;
            cell6.innerHTML = " ";

            purchaseTotalLabel.innerHTML = purchaseTotal;

            purchaseItems.push({
                ProductId: parseInt(newProductId.value),
                ProductQuantity: quantityItem,
                ProductCurrentPrice: currentPriceItem,
                Total: purchaseTotalItem,
                DiscountTotal: 0
            });

            tableRowsNumber += 1;

            productTableRowNumber.innerHTML = tableRowsNumber;
            newProductName.value = "";
            newPrice.value = "";
            newQuantity.value = "";
            newTotalItem.textContent = "";
            //newTotalItem.value = 0;
            //  updatePurchaseTotalItem();

        };

        var validator = $("#newPurchase").validate({
            submitHandler: function () {

                let Purchase = JSON.stringify(
                    {
                        BranchId: parseInt(branchID.value)
                        , CustomerId: parseInt(customerID.value)
                        , Total: 0
                        , Discount: 0
                        , PurchaseItems: purchaseItems
                    });

                $.ajax({
                    url: '/Purchases/Create',
                    data: Purchase,
                    type: 'POST',
                    contentType: 'application/json',
                    dataType: 'json'
                    , success: function () { validator.resetForm(); window.location = '/Purchases'; }
                    , error: function (xhr, status, error) { alert('Error:' + error); console.log(xhr); console.log(status); console.log(error); }
                });

                return false;
            }
        });

        $(document).ready(function () {
            $("#ProductName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/Products/Search',
                        type: 'GET',
                        cache: false,
                        data: request,
                        dataType: 'json',
                        success: function (data) {
                            response($.map(data, function (item) {
                                return {
                                    value: item.productId,
                                    label: item.productName,
                                    price: item.productPrice
                                }
                            }))
                        }
                    });
                },
                minLength: 2,
                select: function (event, ui) {
                    $('#ProductId').val(ui.item.value);
                    $('#ProductName').val(ui.item.label);
                    $('#ProductPrice').val(ui.item.price);
                    $('#ProdcutQuantity').val(1);
                    updatePurchaseTotalItem();
                    return false;
                }
            });
        });

        //

        ProdcutQuantity.addEventListener("change", updatePurchaseTotalItem);
        function updatePurchaseTotalItem() {

            newTotalItem.textContent = newPrice.value * newQuantity.value;

            //if (newPrice.value == 0 || newQuantity.value == 0) {
            //    newTotalItem.textContent = "";
            //}
            //else {
            //    newTotalItem.textContent = newPrice.value * newQuantity.value;
            //}

        }
    </script>

}